[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\nlibrary(DT)\n\n# Interface utilisateur (UI)\nui <- fluidPage(\n  theme = bs_theme(version = 5, bootswatch = \"minty\"),\n  titlePanel(\"Exploration des Diamants\"),\n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(inputId = \"color_rose\", \n                   label = \"Colorier les points en rose ?\", \n                   choices = c(\"Oui\" = TRUE, \"Non\" = FALSE), \n                   selected = TRUE),\n      \n      selectInput(inputId = \"filter_color\", \n                  label = \"Filtrer par couleur :\", \n                  choices = unique(diamonds$color), \n                  selected = \"G\"),\n      \n      sliderInput(inputId = \"max_price\", \n                  label = \"Prix maximum :\", \n                  min = 300, \n                  max = 20000, \n                  value = 3444, \n                  step = 100),\n      \n      # Bouton pour afficher une notification\n      actionButton(inputId = \"show_notification\", \n                   label = \"Afficher une notification\")\n    ),\n    \n    mainPanel(\n      plotOutput(outputId = \"scatter_plot\"),\n      DTOutput(outputId = \"data_table\")\n    )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  filtered_data <- reactive({\n    subset(diamonds, \n           color == input$filter_color & \n             price <= input$max_price)\n  })\n  \n  # Nuage de points\n  output$scatter_plot <- renderPlot({\n    p <- ggplot(filtered_data(), aes(x = carat, y = price))\n    \n    if (input$color_rose == TRUE) {\n      p <- p + geom_point(color = \"pink\", alpha = 0.6)\n    } else {\n      p <- p + geom_point(alpha = 0.6)\n    }\n    \n    p + labs(title = glue(\"prix: {input$max_price} & color: {input$filter_color}\"),\n             x = \"Carat\",\n             y = \"Prix\") +\n      theme_minimal() + \n      theme(\n        plot.background = element_rect(fill = \"gray98\")\n      )\n  })\n  \n  # Tableau interactif avec DT\n  output$data_table <- renderDT({\n    datatable(filtered_data(), \n              options = list(pageLength = 10, \n                             scrollX = TRUE))\n  })\n  \n  # Notification lorsque le bouton est cliquÃ©\n  observeEvent(input$show_notification, {\n    showNotification(\n      paste(glue(\"prix: {input$max_price}, \n            color: {input$filter_color}\")),\n      type = \"message\"\n    )\n  })\n}\n\n# Lancer l'application Shiny\nshinyApp(ui = ui, server = server)\n\nshinylive::export(\n  appdir =\".\",\n  destdir = \"docs\"\n)\n","type":"text"},{"name":"Set up Github.R","content":"#install.packages('usethis')\nlibrary(usethis)\nusethis::use_git_config(\n  scope =\"user\",\n  user.name = \"PandexP31\",\n  user.email = \"mathieu.alves-de-paiva.etu@univ-lille.fr\",\n  init.defaultBranch='main'\n)\n\ninstall.packages(\"shiny\")\n\ninstall.packages(\"shinylive\")\n\nshinylive::export(\n  appdir =\".\",\n  destdir = \"docs\"\n)","type":"text"},{"name":"project.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
